import com.liferay.workspace.testing.ExecuteAndWaitForTask
import com.liferay.workspace.testing.ServerStartTask
import com.liferay.workspace.testing.ServerStopTask
import com.liferay.workspace.testing.ServerUtil
import com.liferay.workspace.testing.WaitForFileExistsAction

import java.util.concurrent.TimeUnit;

import org.zeroturnaround.process.PidProcess
import org.zeroturnaround.process.ProcessUtil
import org.zeroturnaround.process.Processes

// Add task dependencies to the lifecycle tasks
tasks.named("setUp") {
	dependsOn "deployProjects"
	dependsOn "serverStartLiferay"
	dependsOn "startMicroservices"
}

tasks.named("tearDown") {
	dependsOn "serverStopLiferay"
	dependsOn "stopMicroservices"
}

// Define the tasks that are needed for setUp
tasks.register("deployProjects") {
	dependsOn ":client-extensions:liferay-sample-custom-element-1:deploy"
	dependsOn ":client-extensions:liferay-sample-custom-element-2:deploy"
	dependsOn ":client-extensions:liferay-sample-etc-node:deploy"
	dependsOn ":client-extensions:liferay-sample-etc-spring-boot:deploy"
}

tasks.register("serverStartLiferay", ServerStartTask)
tasks.register("serverStopLiferay", ServerStopTask)

tasks.register("startMicroservices") {
	dependsOn ":client-extensions:liferay-sample-etc-node:startMicroservice"
	dependsOn ":client-extensions:liferay-sample-etc-spring-boot:startMicroservice"
}

tasks.register("stopMicroservices") {
	dependsOn ":client-extensions:liferay-sample-etc-node:cleanStartMicroservice"
	dependsOn ":client-extensions:liferay-sample-etc-spring-boot:cleanStartMicroservice"
}

// start microservices tasks
project(":client-extensions:liferay-sample-etc-node") {
	Project project ->

	project.tasks.register('startMicroservice', ExecuteAndWaitForTask) {
		doFirst new WaitForFileExistsAction(provider {"${gradle.liferayWorkspace.homeDir}/routes/default/${project.name}"})

		execArgs.addAll rootProject.file("gradlew").path, "${project.path}:packageRunStart"
		expectedOutput.set "App listening on 3001"

		onlyIf {
			!ServerUtil.isReachable("http://localhost:3001")
		}
	}
}

project(":client-extensions:liferay-sample-etc-spring-boot") {
	Project project ->

	project.tasks.register('startMicroservice', ExecuteAndWaitForTask) {
		doFirst new WaitForFileExistsAction(provider {"${gradle.liferayWorkspace.homeDir}/routes/default/${project.name}"})

		execArgs.addAll rootProject.file("gradlew").path, "${project.path}:bootRun"
		expectedOutput.set "Started SampleSpringBootApplication in"

		onlyIf {
			!ServerUtil.isReachable("http://localhost:58081")
		}
	}
}

subprojects {
	Project project ->

	afterEvaluate {
		// make sure all microservices depend on both deployment and server start
		tasks.withType(ExecuteAndWaitForTask) {
			task ->

			task.dependsOn ":deployProjects"
			task.dependsOn ":serverStartLiferay"

			String name = task.name

			String cleanTaskName = "clean" + name.charAt(0).toUpperCase() + name.substring(1)

			tasks.named(cleanTaskName) {
				doFirst {
					if (!task.pid.isPresent()) {
						return
					}

					PidProcess process = Processes.newPidProcess(task.pid.get());

					if (!process.isAlive()) {
						return
					}

					logger.lifecycle("Destroying background process with pid ${task.pid.get()}")

					ProcessUtil.destroyGracefullyOrForcefullyAndWait(process, 30, TimeUnit.SECONDS, 10, TimeUnit.SECONDS)
				}
			}
		}
	}
}

tasks.named("deployProjects") {
	doLast {
		println "deployProjects finished"
	}
}
tasks.named("serverStartLiferay") {
	doLast {
		println "serverStartLiferay finished"
	}
}
tasks.named("startMicroservices") {
	doLast {
		println "startMicroservices finished"
	}
}